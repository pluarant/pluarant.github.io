/*routerApp.run(['$scope', '$rootscope', function($scope, $rootscope) {

}]); */

/*
routerApp.run(function ($rootScope, $location) {
    $rootScope.$on('$routeChangeSuccess', function(){
            analytics('send', 'pageview', $location.path());
	        });
});
*/

//IGNORECOMBINE - DO NOT REMOVE THIS LINE, used by combine script to ignore content
routerApp.controller('loading', ["$scope", function($scope) {
	console.log("tringme init from loading");
}]);

routerApp.controller('settingController', ['$scope', '$window', function ($scope, $window) {
    analytics('send', 'pageview', '#settings');

    $scope.$on('$viewContentLoaded', function () {
        if ($('#testDiv').length > 0) {
            $('#testDiv').slimScroll({
                alwaysVisible: true,
                railVisible: true,
                railColor: '#fff',
                railOpacity: 1,
                height: '403px',
                railBorderRadius: 0
            });
        }

        //update_contacts();
    });


}]);

routerApp.controller('dashboardController', ['$scope', '$window', '$state', function($scope, $window, $state) {
    analytics('send', 'pageview', '#dashboard');

	$scope.$on('$viewContentLoaded', function(){
    if ($('#testDiv').length > 0) {
        $('#testDiv').slimScroll({
            alwaysVisible: true,
            railVisible: true,
            railColor: '#fff',
            railOpacity: 1,
            height: '403px',
            railBorderRadius: 0
        });
    }});

    if($scope.gravatarurl == '') {
	$scope.gravatarurl = gravatar($scope.appdata.email);
    }

    $scope.appadd = function() {
	 mesibo_appadd($scope.appdata.appname);
    };
    
    $scope.app_delete = function(app) {
		$scope.showPrompt($window, 'Delete ' + app.name + '?', 'Entire App along with all the users, groups and stats will be deleted. Continue?', 'Delete', function() {
	 		mesibo_appdel(app.token);
		}, 'Cancel');
    };
    
}]);

routerApp.controller('appcontroller', ['$scope', '$window', '$state', '$stateParams', function($scope, $window, $state, $stateParams) {
    analytics('send', 'pageview', '#appsetting');

	$scope.$on('$viewContentLoaded', function(){
    if ($('#testDiv').length > 0) {
        $('#testDiv').slimScroll({
            alwaysVisible: true,
            railVisible: true,
            railColor: '#fff',
            railOpacity: 1,
            height: '403px',
            railBorderRadius: 0
        });
    }});

    $scope.appdata.search = '';
    $scope.appdata.message = '';

    var name = $stateParams.name;
    mesibo_select_app(name);
   // alert('app: ' + name);
    
    $scope.save_general = function() {
    	 //alert($scope.user.app.name);
	 mesibo_appset($scope.user.app.token, $scope.user.app.name, $scope.user.app.users, $scope.user.app.msgs, '', -1);
    };
    
    $scope.save_webhooks = function() {
    	 //alert($scope.user.app.name);
	 mesibo_appset($scope.user.app.token, '', -1, -1, $scope.user.app.url, $scope.user.app.notify);
    };
    
    $scope.user_add = function() {
    	 //alert($scope.user.app.name);
	 mesibo_useradd($scope.user.app.token, $scope.appdata.newappid, $scope.appdata.newuseraddr, $scope.appdata.newuseractive, $scope.appdata.newuserpin);
	 $scope.appdata.newuseraddr = '';
    };
    
}]);

routerApp.controller('userlistcontroller', ['$scope', '$window', '$state', '$stateParams', function($scope, $window, $state, $stateParams) {
    analytics('send', 'pageview', '#users');
    //alert('uc: ');

	$scope.$on('$viewContentLoaded', function(){
    if ($('#testDiv').length > 0) {
        $('#testDiv').slimScroll({
            alwaysVisible: true,
            railVisible: true,
            railColor: '#fff',
            railOpacity: 1,
            height: '403px',
            railBorderRadius: 0
        });
    }});

    $scope.appdata.search = '';
    $scope.appdata.message = '';

    	 //alert($scope.user.app.name);
 	mesibo_usersget($scope.user.app.token);

    $scope.toggle_user_pin = function(u) {
	 //"uid", "storage", "ssr", "active", "pinned"
	 mesibo_userset($scope.user.app.token, u.uid, -1, -1, -1, (u.pinned^1));
    };
    
    $scope.toggle_user_activate = function(u) {
	 //"uid", "storage", "ssr", "active", "pinned"
	 mesibo_userset($scope.user.app.token, u.uid, -1, -1, (u.active^1), -1);
    };
    
    $scope.user_delete = function(u) {
	 //"uid", "storage", "ssr", "active", "pinned"
		$scope.showPrompt($window, 'Delete user ' + u.addrlsb + '?', 'User will be deleted. Continue?', 'Delete', function() {
	 		mesibo_userdel($scope.user.app.token, u.uid);
		}, 'Cancel');

    };
    
    var search = '';
    $scope.user_search_change = function() {
	if($scope.appdata.search == '' && search != '') {
		search = '';
	 	mesibo_usersget($scope.user.app.token, $scope.appdata.search);
	}
    };
    
    $scope.user_search = function() {
	search = $scope.appdata.search;
 	mesibo_usersget($scope.user.app.token, $scope.appdata.search);
    };
    
    $scope.user_refresh = function() {
	$scope.appdata.search = search; //update searchbar with last search
 	mesibo_usersget($scope.user.app.token, $scope.appdata.search);
    };


}]);

routerApp.controller('usercontroller', ['$scope', '$window', '$state', '$stateParams', function($scope, $window, $state, $stateParams) {
    var uid = $stateParams.uid;
    mesibo_select_user(uid);

    $scope.appdata.newappid = $scope.user.user.appid;
    $scope.appdata.message = '';

    $scope.user_gentoken = function() {
	 //"uid", "storage", "ssr", "active", "pinned"
	 mesibo_usertoken($scope.user.app.token, $scope.user.user.uid, $scope.appdata.newappid);
    };
    
    $scope.user_regentoken = function() {
	 //"uid", "storage", "ssr", "active", "pinned"
	 mesibo_usertoken($scope.user.app.token, $scope.user.user.uid, $scope.user.user.appid);
    };
    
    $scope.user_deltoken = function() {
	 //"uid", "storage", "ssr", "active", "pinned"
	 mesibo_usertoken($scope.user.app.token, $scope.user.user.uid, $scope.user.user.appid, 1);
    };
    
    $scope.user_message = function() {
	 mesibo_message(function(res, o, none) {
			 $scope.appdata.message = '';
			}, 
			$scope.user.app.token, $scope.appdata.msgfrom, $scope.user.user.addrlsb, '', $scope.appdata.message);
    };
		
}]);

routerApp.controller('loginController', ['$scope', '$window', '$state', function($scope, $window, $state) {
    analytics('send', 'pageview', '#login');
    mesibo_storage_clear();

    $scope.doLogin = function() {
	 mesibo_login($scope.appdata.email, $scope.appdata.password, $scope.appdata.remember);
    };

    $scope.signuphandler = function(res, o, e) {
    		if(res) {
			$state.go('emailsent');
			return;
		}

		if(e == 'EXISTS') {
			$scope.appdata.error = 'Your account already exists, login to continue!';
			$state.go('login');
			return;
		}
		
		$scope.appdata.error = 'Something went wrong, try again later!';
		$scope.$applyAsync();
		return;
    	};
		
    $scope.dosignup=function(){ 
	mesibo_signup($scope.signuphandler, $scope.appdata.name, $scope.appdata.email, $scope.appdata.password, '');
    };
    
    $scope.doThirdPartyLogin = function(type) {
    	mesibo_login_thirdparty(type);
    };
		
    $window.show_loginfailed = function(message) {
    	$scope.showAlert('Login Failed', "Check your email or password and try again!", 'Ok');
    }

    	$window.show_signupfailed = function(message) {
		    	$scope.showAlert('Account Exists!', "Your account already exists, login with your password to continue.", 'Login Now');
			$state.go('login');
    		}

}]);

routerApp.controller('contentNavController', ['$scope', function($scope) {
		$scope.shortname = $scope.user.name;
		if($scope.user.name.length > 18) {
			$scope.shortname = $scope.user.name.substring(0, 18) + '..';
		}

}]);

// routerApp.controller('conferencecallController', function($rootScope, $scope, $http, $location) {


// });
routerApp.controller('contactListController', ['$scope', '$window', function($scope, $window) {

    $scope.searchText = '';
    $scope.searchVisible = false;

    $scope.addContact = function() {
    	 var c=$scope.vm.createContact;
	 mesibo_addcontact(0, c.name, c.number, c.type);
    };
    
    $scope.toggleSearch = function() {
	if($scope.searchVisible) {
		$scope.searchText = '';
		$scope.searchVisible = false;
	} else {
		$scope.searchVisible = true;
	}
    };
    
    $scope.isSearchVisible = function() {
    	return $scope.searchVisible;
    }
    
    $scope.doRefresh = function() {
    	mesibo_reload();
    }

    /*
    $scope.contactfilter = function(c) {
    	alert(c.name);
	return true;
	//return c.name.substring(0,1).match(/A/gi) && $scope.otherCondition;
    }
    */

}]);

routerApp.controller('contactEditController', ['$scope', '$window', '$stateParams', function($scope, $window, $stateParams) {

}]);

routerApp.controller('verifyphoneController', ['$scope', '$window', '$location', '$state', function($scope, $window, $location, $state) {
    		analytics('send', 'pageview', '#verifyphone');

		$scope.appdata.sentby = '';
		$scope.verify = function() {
			var number = $scope.register.number;
			mesibo_verifyphone(function(result, obj, error) {
					if(false == result) {
		    				$scope.showAlert(error, "Please check your number and try again.", 'Ok');
					}
				},
				number);
			};

		$window.phone_updated = function() {
			$scope.$apply();
			$state.go('setting');
		}

		}]);

		

routerApp.controller('verifycodeController', ['$state', '$scope', '$window', '$location',function($state, $scope, $window, $location) {
    		analytics('send', 'pageview', '#verifycode');
		$scope.message = 'You must have received a verification code from TringMe. Please enter below.';
		if($scope.appdata.sentby == 'sms') {
			$scope.message = 'We have sent a SMS with verification code to your phone number. It may take a few minutes to receive it.';
		} else if($scope.appdata.sentby == 'call') {
			$scope.message = 'You will soon receive a call from us with a verification code. Note it down and then enter it here';
			//Listen carefully to the call as it will contain a verification code. 
		}

		$scope.verifycode= function(){
			var code = $scope.register.code.trim();
			if(code.length < 6) {
		    		$scope.showAlert('Invalid Code', "Please check the code and try again.", 'Ok');
				return;
			}

			mesibo_verifycode(function(result, obj, error) {
					if(false == result) {
		    				$scope.showAlert('Invalid Code', "Please check the code and try again.", 'Ok');
					}
					else {
		    				$scope.showAlert('Successful', "Your phone number has been updated.", 'Ok');
					}
				},
				code);
		};
		
		$window.phone_updated = function() {
			$scope.$apply();
			$state.go('setting');
		}

		}]);
routerApp.controller('welcometotringmeController', ['$scope', '$window', '$location',function($scope, $window, $location) {
    		analytics('send', 'pageview', '#welcome');
		}]);

routerApp.controller('forgotpasswordController', ['$scope', '$window', '$state',function($scope, $window, $state) {
		$scope.forgetmail=function(){
			var email=$scope.appdata.email;
			mesibo_resetpassword(function(r,o,e) {
				if(r)
					$state.go('passwordmailsent', {email:email});
				else {
					$scope.showAlert('Account not found', 'You do not have TringMe Account associated with this email. Please sign-up to continue.', 'Ok');
					$state.go('register');
				}


				}, email);
			//$location.path("/forgetmailsend/"+email);
		};

		}]);

routerApp.controller('passwordmailsentController',['$scope','$window', '$stateParams', function($scope, $window,$stateParams) {
		var email = $stateParams.email;
		$scope.appdata.email = email;
}]);


routerApp.controller('conferencecallController', ['$scope', function($scope) {
		}]);

routerApp.controller('broadcastmessageController', ['$scope', function($scope) {
		}]); 

// Call History 

routerApp.controller('accountinformationController',['$rootScope','$scope','$state','$window','$location', function ($rootScope, $scope, $state, $window, $location) {
    		analytics('send', 'pageview', '#account');
		$scope.setpassword = function () {
		//  debugger;
		var oldpassword = $scope.oldpassword;
		var newpassword = $scope.newpassword;
		var confirmpassword = $scope.confirmpassword;
		if (newpassword != confirmpassword) {
		$scope.IsMatch = true;
		return false;
		} else {
		mesibo_setaccount(function(r, o, e) {
				if(r) {
					$scope.showAlert('Password Changed', 'Your password was changed successfully.', 'Ok');
				} else {
					$scope.showAlert('Password not changed', 'Please retype your current password and try again.', 'Ok');
				}
			},
			oldpassword,newpassword, '');
		}
		};
		$scope.IsMatch = false;
    
		$scope.appdata.inprogress = ' (checking bonus)';

    		$scope.update_bonus = function() {
			if($scope.user.bonus == undefined || $scope.user.bonus == '') {
				$scope.appdata.bonus = {};
				$scope.appdata.bonus['amount'] = 0;
				$scope.appdata.bonus['minamount'] = 0;
				$scope.appdata.bonus['expiry'] = '';
				return;
			}

			$scope.appdata.bonus = $scope.user.bonus[0];
    			$scope.appdata.inprogress = '(expiry: ' + $scope.appdata.bonus['expiry'] + ')';
    		};
    
    		$scope.update_bonus();
    		$scope.user.bonus = ''; //clear it else we will have old data even if bonus was expired as api will not send bonus field
    
		mesibo_getbonus(function(res, u, none) {
    			$scope.appdata.inprogress = '';
    			$scope.update_bonus();
			$scope.$apply();
	    	});



		}]);

routerApp.controller('subscriptionController', ['$scope', function($scope) {
		}]);

routerApp.controller('purchasehistoryController',['$rootScope','$scope','$window','$location', function ($rootScope, $scope, $window, $location) {
		$scope.appdata['purchasetype'] = "1";
			
		$scope.show_transactions = function(res, c, e) {
			console.log("show purchase history");
			if(c['reccount'] == 0)
				return;

			$scope.appdata.purchases = c;
			$scope.$apply();
		}
		
		mesibo_gettransactions($scope.show_transactions, 1);

		$scope.$on('$viewContentLoaded', function () {
			});

		$scope.onPurchaseType = function() {
			mesibo_gettransactions($scope.show_transactions, $scope.appdata.purchasetype);
		}

		}]);

routerApp.controller('paymentController', ['$scope', '$window', function ($scope, $window) {
	$scope.appdata.navclass = 'payment';
    $scope.payment = mesibo_paymentinfo();
  
    $scope.$on('$viewContentLoaded', function () {
        if ($('#testDiv').length > 0) {
            $('#testDiv').slimScroll({
                alwaysVisible: true,
                railVisible: true,
                railColor: '#fff',
                railOpacity: 1,
                height: '403px',
                railBorderRadius: 0
            });
        }

        //update_contacts();
    });


}]);

routerApp.controller('paymentleftController', ['$scope', function($scope) {
    $scope.payment = mesibo_paymentinfo();

}]);

routerApp.controller('creditcardController', ['$scope', function($scope) {
    	analytics('send', 'pageview', '#creditcard');
    $scope.payment = mesibo_paymentinfo();
    $scope.payment.amount = $scope.payment.amounts[1];
    $scope.payment.tax = 0;
    $scope.payment.coupon = '';
    $scope.payment.couponinfo = ''; //You Will get 20% Extra Credit With this Coupon
    $scope.payment.ccnum = '';
    $scope.payment.name = '';
    $scope.payment.cvv = '';
    $scope.payment.phone = '';
    $scope.payment.month = 0;
    $scope.payment.year = 0;
    $scope.payment.agree1 = 0;
    $scope.payment.agree2 = 0;

    $scope.payment.ccnumerror = '';
    $scope.payment.dateerror = '';

    //return true to disable, false to enable
    $scope.checkForm = function() {
    	if($scope.payment.ccnum.trim().length < 16) {
    		$scope.payment.ccnumerror = '';
		return true;
	}

	if(!mesibo_checkcc($scope.payment.ccnum.trim())) {
    		$scope.payment.ccnumerror = '-Invalid Credit Card';
		return true;
	}

    	$scope.payment.ccnumerror = '';
    	
	if($scope.payment.month == 0 || $scope.payment.year == 0) {
    		$scope.payment.dateerror = '';
		return true;
	}

	if(!mesibo_checkccdate($scope.payment.month, $scope.payment.year)) {
    		$scope.payment.dateerror = '-Invalid Expiry';
		return true;
	}

    	$scope.payment.dateerror = '';
	
	if($scope.payment.name.trim().length < 3)
		return true;
	
	if($scope.payment.cvv.trim().length < 3)
		return true;
	
	if($scope.payment.phone.trim().length < 7)
		return true;

	
	if($scope.payment.agree1 == 0 || $scope.payment.agree2 == 0)
		return true;
	
	return false;
    }
    
    $scope.amountchanged = function() {
    	$scope.payment.bonus = toFixed($scope.payment.amount*0.2, 2);
        if(parseFloat($scope.payment.bonus) > parseFloat($scope.user.referbonus)) {
    		$scope.payment.bonus = $scope.user.referbonus;
	}
    }
    
    $scope.applycoupon = function() {
    	$scope.payment.couponinfo = 'Invalid Coupon Code'; //You Will get 20% Extra Credit With this Coupon
    }

    $scope.paycc = function() {
	var p = $scope.payment;
	mesibo_payment_cc(p.name, p.ccnum, p.month, p.year, p.cvv, '', p.amount);
    }

    $scope.amountchanged();
    
}]);

function toFixed(value, precision) {
    var precision = precision || 0,
    power = Math.pow(10, precision),
    absValue = Math.abs(Math.round(value * power)),
    result = (value < 0 ? '-' : '') + String(Math.floor(absValue / power));

    if (precision > 0) {
       var fraction = String(absValue % power),
       padding = new Array(Math.max(precision - fraction.length, 0) + 1).join('0');
       result += '.' + padding + fraction;
    }
    return result;
}

routerApp.controller('paypalController', ['$scope', function($scope) {
    	analytics('send', 'pageview', '#paypal');
    $scope.payment = mesibo_paymentinfo();
    $scope.payment.amount = $scope.payment.ppamounts[0];
    $scope.payment.agree1 = 0;
    $scope.payment.agree2 = 0;
    $scope.payment.fee = 0;
    $scope.payment.total = $scope.payment.amount;

    if($scope.payment.paypalfee > 0) {
    	$scope.payment.fee = $scope.payment.amount*$scope.payment.paypalfee/100;
	$scope.payment.total = parseFloat($scope.payment.amount) + parseFloat($scope.payment.fee);
    	$scope.payment.fee = toFixed($scope.payment.fee, 2);
    	$scope.payment.total = toFixed($scope.payment.total, 2);
    }

    $scope.amountchanged = function() {
    	if($scope.payment.paypalfee > 0) {
    		$scope.payment.fee = $scope.payment.amount*$scope.payment.paypalfee/100;
	    	$scope.payment.total = parseFloat($scope.payment.amount) + parseFloat($scope.payment.fee);
    		$scope.payment.fee = toFixed($scope.payment.fee, 2);
    		$scope.payment.total = toFixed($scope.payment.total, 2);
	}
    }
    
    $scope.applycoupon = function() {
    	$scope.payment.couponinfo = 'Coupons only valid on Credit Card Payments';
    }
    
    $scope.paypp = function() {
	if($scope.payment.agree1 == 0 || $scope.payment.agree2 == 0) {
		$scope.showAlert("Missing Inputs", "You must agree to both the terms.", 'Ok');
		return;
	}

	var p = $scope.payment;
	mesibo_payment_paypal($scope.payment.total);
    }
    
    $scope.checkForm = function() {
	if($scope.payment.agree1 == 0 || $scope.payment.agree2 == 0)
		return true;

	return false;
    }
	
    }]);

routerApp.controller('netbankingController', ['$scope', function($scope) {
    	analytics('send', 'pageview', '#netbanking');
    $scope.payment = mesibo_paymentinfo();
    $scope.payment.amount = $scope.payment.amounts[1];
    $scope.payment.tax = $scope.payment.servicetax;
    $scope.payment.coupon = '';
    $scope.payment.couponinfo = ''; //You Will get 20% Extra Credit With this Coupon
    $scope.payment.bank = $scope.payment.banks[0];
    $scope.payment.agree1 = 0;
    
    $scope.applycoupon = function() {
    	$scope.payment.couponinfo = 'Invalid Coupon Code'; //You Will get 20% Extra Credit With this Coupon
    }

    $scope.paynb = function() {
	var p = $scope.payment;
	mesibo_payment_netbanking(p.bank.id, p.amount);
    }

    $scope.checkForm = function() {
	if($scope.payment.agree1 == 0)
		return true;

	return false;
    }

}]);

routerApp.controller('redeemvoucherController', ['$scope', function($scope) {
    	analytics('send', 'pageview', '#voucher');
    	$scope.payment.agree1 = 0;

	$scope.redeem = function() {
		$scope.showAlert('Invalid Voucher Code', 'Please check and try again later', 'Ok');
		}
    
	$scope.checkForm = function() {
		if($scope.payment.agree1 == 0)
			return true;

		return false;
    	}

}]);

function pad(val) {
            var valString = val + "";
            if(valString.length < 2)
            {
                return "0" + valString;
            }
            else
            {
                return valString;
            }
}

routerApp.controller('callprogressController', ['$scope', '$window', '$state', '$stateParams', function ($scope, $window, $state, $stateParams) {
    	analytics('send', 'pageview', '#callprogress');
		var phone = $stateParams.phone;
		if(phone.charAt(0) == '+')
			phone = phone.substring(1);

		var cont = mesibo_reverselookup(phone);
		var name = '+' + phone;
		if(null != cont)
			name = cont.name;
		else {
			var p = phone.substring(0, 7);
			if(p == '1000555')
			name = 'TringMe Test Call';
		}

		if(cont && cont.photo != '')
			$scope.calleeimage = $scope.user.imageurl + '/' + cont.photo + '.jpg';
		else
			$scope.calleeimage = $scope.user.imageurl + '/' + 'male.jpg';

		$scope.calleename = name;
		$scope.calleephone = phone;
		$scope.callstatus = 'Calling';
		$scope.calltimer = '';
		$scope.answertime = 0;
		$scope.timer = 0;
		$scope.microphonetext = 'Please allow microphone access to continue';
		
		$scope.calltimer = function() {
			var date = new Date();
			console.log(date.getTime() + ' ' + $scope.answertime);
			var elapsed = parseInt((date.getTime() - $scope.answertime)/1000);
			var s = pad(elapsed%60);
			var m = pad(parseInt(elapsed/60));
			//var h = pad(parseInt(elapsed/3600));
			$scope.$apply(function() {
				$scope.calltimer = m + ':' + s;
			});
		}

		//return;
		//mesibo_iscallsupported
		var callresult = mesibo_call(phone, 'audioPlayer', 'flashdiv', false, function(callstatus, data) {
			var cs =  mesibo_callstatusToString(callstatus);
			if(null != cs) {
				$scope.callstatus = cs;
				$scope.microphonetext = '';
			}


			if(callstatus == 0x103) {
				$scope.microphonetext = '';
				$scope.$apply();
				return;
			}

			$scope.$apply();
			
			if(callstatus == 0x102) {
				$state.go('dashboard.microphoneaccess');
				return;
			}

			if(callstatus == 4) {
				var date = new Date();
				$scope.answertime = date.getTime();
				$scope.timer = setInterval($scope.calltimer, 1000);
			}

			console.log("callstatus: " + callstatus + ' data: ' + data);
			if(callstatus >= 5 && 26 != callstatus) {
				mesibo_hangup();
				if($scope.timer > 0)
					clearInterval($scope.timer);
				$scope.timer = 0;
				setTimeout(function() {
					$state.go('dashboard.callfinish');
				}, 3000);
			}
		}); 

		if(!callresult) {
			$state.go('dashboard.callnotsupported', {'phone': phone});
		}

		$scope.hangup = function() {
			mesibo_hangup();
			if($scope.timer > 0)
				clearInterval($scope.timer);
			$scope.timer = 0;
			if($scope.answertime > 0)
				$state.go('dashboard.callfinish');
			else
				$scope.dashboard();
				//$state.go('dashboard');
		}

		$scope.ismute = false;
		
		$scope.greyclass = function(enable) {
			alert(enable);
			if(enable)
				return "";
			return "grey";
		}
		
		$scope.activatedclass = function(activate) {
			if(activate)
				return "fa fa-user";
			return "fa fa-user grey";
		}

		$scope.mutesupported = function() {
			return mesibo_ismutesupported();
		}
		
		$scope.dtmfsupported = function() {
			return mesibo_isdtmfsupported();
		}

		$scope.rtcsupported = function() {
			return mesibo_isrtcsupported();
		}
		
		$scope.mute = function() {
			$scope.ismute = mesibo_mute();
		}
}]);


routerApp.controller('callnotsupportedController', ['$scope', '$window', '$state', '$stateParams', function ($scope, $window, $state, $stateParams) {
		var phone = $stateParams.phone;
		
		$scope.callback = function(id, phone) {
			//mesibo_callback(phone);
			$scope.showAlert("Callback initiated", "You will soon receive a call. <p>Answer and then wait to get connected to the destination");
			$state.go('dashboard');
		}
}]);

routerApp.controller('microphoneaccessController', ['$scope', '$window', '$state', '$stateParams', function ($scope, $window, $state, $stateParams) {
		var phone = $stateParams.phone;
		
		$scope.call = function(id, phone) {
			//mesibo_callback(phone);
			$state.go("dashboard.callprogress", {phone:phone});
		}
}]);

routerApp.directive('header', function () {
		return {
	restrict: 'A', //This menas that it will be used as an attribute and NOT as an element. I don't like creating custom HTML elements
	replace: true,
	templateUrl: "views/header.html",
	controller: ['$scope', '$filter', function ($scope, $filter) {
		// Your behaviour goes here :)
	}]
	}
});

routerApp.directive('footerUp', function () {
		return {
restrict: 'A', //This menas that it will be used as an attribute and NOT as an element. I don't like creating custom HTML elements
replace: true,
templateUrl: "views/footer_up.html",
controller: ['$scope', '$filter', function ($scope, $filter) {
// Your behaviour goes here :)
}]
}
});

routerApp.directive('footerDown', function () {
		return {
restrict: 'A', //This menas that it will be used as an attribute and NOT as an element. I don't like creating custom HTML elements
replace: true,
templateUrl: "views/footer_down.html",
controller: ['$scope', '$filter', function ($scope, $filter) {
// Your behaviour goes here :)
}]
}
});

routerApp.directive('offerStrip', function () {
		return {
restrict: 'A', //This menas that it will be used as an attribute and NOT as an element. I don't like creating custom HTML elements
replace: true,
templateUrl: "views/offer_strip.html",
controller: ['$scope', '$filter', function ($scope, $filter) {
// Your behaviour goes here :)
}]
}
});

routerApp.controller("mainCtrl", ['$scope', '$window', '$state', '$location', function($scope, $window, $state, $location){
		
		mesibo_setapi("https://mesibo.com/develapi/api.php");
		$scope.appdata = {email: '', password:'', remember: false, appname:'', newphone:'', message: '', error: '', sentby:'', inprogress: '', navclass: 'call', newappid:'', newuseraddr: '', newuseractive: true, newuserpin: false, search: '', platform: '1', msgfrom:'', message: ''};
		$scope.termsagree = false;
		$scope.gravatarurl = '';
		$scope.userprofile = {name: '', day:'', month:'', year:'', gender:'', email:'', city:'', state:'', country:''};
		$scope.appdata.offers = [];
		$scope.appdata.promos = [];
		$scope.appdata.offer = {};
		$scope.appdata.promo = {};
		
		$scope.support = {};
		$scope.support.tickets = [];
		$scope.support.topics = [];
		$scope.support.topic = 0;
		$scope.support.ticket = {};

		$scope.promocall = {title: 'Get Your Free International Call',
				    text: "We understand that you would like to try our services before you buy, so we offer you the first international call up to 2 minutes for free. To prevent misuse of this offer, the free call is limited to certain countries and offered only once per phone number.",
				    buttontext: '',
				    url: '' };

		var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
    		// Opera 8.0+ (UA detection to detect Blink/v8-powered Opera)
		var isFirefox = typeof InstallTrigger !== 'undefined';   // Firefox 1.0+
		var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
		    // At least Safari 3+: "[object HTMLElementConstructor]"
		var isChrome = !!window.chrome && !isOpera;              // Chrome 1+
		var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6

		$scope.appdata.browser = 'unknown';
		if(isChrome)
			$scope.appdata.browser = 'chrome';
		else if(isFirefox)
			$scope.appdata.browser = 'firefox';
		else if(isOpera)
			$scope.appdata.browser = 'opera';
		else if(isSafari)
			$scope.appdata.browser = 'safari';
		else if(isIE)
			$scope.appdata.browser = 'ie';


		angular.element(document).ready(function() {
		       console.log('ready: ' + $scope.appdata.browser);
		       //listcss();
		       mesibo_init();
		});


		$scope.is_loggedin = function() {
			//console.log("loggedin: " + (mesibo_isloggedin()?'yes':'no'));
			return mesibo_isloggedin();
		}
		
		$scope.goto_support = function() {
			if(mesibo_isloggedin()) {
				$state.go('support');
				return;
			}

			$scope.showAlert("Mesibo Support", "Please login to contact our support team.\n\nIf you are unable to login, please send an email to support@tringme.com. Please note that for any issues other than the login problem, you must login and file a support ticket.");
		}

		$window.show_connection_progress = function(show) {

		}
		
		$window.show_connection_error = function(type, message) {
			$scope.showAlert("Connection Failed", message);
		}

    		$window.show_login_page = function(email, error) {
			//alert('show login: ' + email + ',' + error);
			var query = $location.search();
			var name = objValue(query, 'name', '');
			if(email == '' || email == undefined)
				email = objValue(query, 'email', '');

			//console.log("show login: " + message + ' q:' + query);
			//console.log(query);
			if(email != '' && name != '') {
				//mesibo_signup(name, email, '', '', '', '');
				$state.go('register');
				return;
			}

			if(email != 'undefined') {
				$scope.appdata.email = email;
			}

			$scope.appdata.password = '';
			$scope.appdata.error = error;
			$scope.$applyAsync();
			$state.go('login');
	    	}
		
		/*
		$scope.showAlertMD = function(title, content, oktitle) {
    			// Appending dialog to document.body to cover sidenav in docs app
		   	var confirm = $mdDialog.alert()
			.clickOutsideToClose(true)
        	  	.content(content)
	          	.title(title)
			.ok(oktitle)

			$mdDialog.show(confirm);
  		};
		*/
		
		$scope.showAlert = function(title, content, oktitle) {
    			// Appending dialog to document.body to cover sidenav in docs app
			//
			/*
			BootstrapDialog.show({
				title: title,
				message: content
			});
			*/

			if(oktitle == null || oktitle == '')
				oktitle = 'Ok';

			$scope.showPrompt(null, title, content, oktitle, null);
  		};

		/*
		$scope.showPromptMD = function(parentobj, title, content, oktitle, callback) {
    			// Appending dialog to document.body to cover sidenav in docs app
		   	var confirm = $mdDialog.confirm()
        	  	.content(content)
	          	.title(title)
          	  	//.targetEvent(ev)
          	  	.ok(oktitle)
          	  	.cancel('Cancel');

			if(parentobj) {
				confirm.parent = parentobj;
			}

			$mdDialog.show(confirm).then(callback, function() {
					//canceled
    			});
  		};
		*/
		
		$scope.showPrompt = function(parentobj, title, content, oktitle, callback, canceltitle) {
			if(oktitle.length < 6)
				oktitle = '&nbsp;' + oktitle + '&nbsp;';

			var buttons = [
					{
					label: 'Cancel',
					action: function(dialoginstance) {
						dialoginstance.close();
					}
					},
					{
					label: oktitle,
					action: function(dialoginstance) {
						dialoginstance.close();
						if(null != callback)
							callback();
						}
					}
				];

			if(typeof canceltitle == 'undefined' || canceltitle == undefined || canceltitle == null || canceltitle == '') {
				buttons.splice(0, 1);
			} else {
				buttons[0].label = canceltitle;
			}

			BootstrapDialog.show({
				title: title,
				message: content,
				cssClass: 'appjs-dialog',
				buttons: buttons
			});
		}

		// since we can not use bitwise operator in angular directives
		$scope.checkFlag = function(value, flag){
			   return value & flag;
		}
		
		$scope.validemail = function() {
			return mesibo_isvalidemail($scope.appdata.email);
		}

		$scope.validurl = function() {
			return mesibo_isvalidurl($scope.user.app.url);
		}
		
		$scope.inetntoa = function(ip) {
			if(0 == ip)
				return 'offline';
			return inet_ntoa(ip);
		}

		$scope.logout = function() {
    			analytics('send', 'pageview', '#logout');
			mesibo_logout();
			//$state.go('login'); // will be called from show_login
		}

		$scope.update_promos_offers = function() {
		}

		$scope.dashboard = function() {
			$state.go('dashboard');
		}

		$window.show_dashboard= function(u) {
			console.log("show dashboard");
			/*
			$scope.$apply(function(){
				$scope.user = u;
				});
			*/
			$scope.dashboard();
		}

		$scope.getHash = function(name) {
			var hash = 0;
			if (name.length == 0) return hash;
			for (i = 0; i < name.length; i++) {
				var c = name.charCodeAt(i);
				hash = ((hash<<5)-hash)+c;
				hash = hash & hash; // Convert to 32bit integer
			}
		       return hash;
		}

		$window.update_userinfo= function(u) {
			//debugger;
			console.log("update userinfo");
			//Log(u);
			$scope.$apply(function(){
					//u.credits = parseFloat(u.credits).toFixed(2);
					//u.referbonus = parseFloat(u.referbonus).toFixed(2);
					$scope.user = u;
					//$scope.update_promos_offers();
					});
		}

		$window.update_offers= function() {
		}

		$window.update_promos = function () {
		}
		
		$window.show_error = function (op, error) {
			$scope.showAlert('Failed', 'Something went wrong, try again later', 'Ok');
		}

		$window.show_verify_phone_page=function(message) {
			$state.go('verifyphone');
		};

		$window.show_verify_code_page=function(sentby) {
			$scope.appdata.sentby = sentby;
			$state.go('verifycode');
		};

		$window.show_verify_code_popup=function(sentby) {
			$state.go('setting.changephonecode');
		}
    		
		$scope.confirmRedeemBonus = function() {
			var title = 'Redeem Bonus Credits';
			var text = 'Awesome, continue on purchase page to redeem your bonus credits before it expires.';
			$scope.showPrompt(null, title, text, 'Continue', function() {
				$state.go('payment');
			});
   		};
		
		$window.registration_successful=function(type) {
			if(type == 1)
    				analytics('send', 'pageview', '#registered');
			else
    				analytics('send', 'pageview', '#regsuccessful');
		};


		/*
		$window.show_call_records = function(u) {
			console.log("show call history");
			$scope.history = '';
			//debugger;
			$scope.$apply(function(){
					for(var i in u) {
					u[i].dur = Math.round(u[i].dur/60)+':'+Math.round(u[i].dur%60);	
					u[i].charge='$'+myToFixed(u[i].charge,2);	
					}
					$scope.history = u;
					//$scope.cont = u;
					});
		}
		*/
		return this;
}]);

angular.module('contactFilter',[])
.filter('contactfilter', function() {
		return function(inputs, search) {
			if (!inputs) return inputs;
			if (!search || search.trim().length == 0) return inputs;
			var query = ('' + search).toLowerCase();
			var result = [];
			angular.forEach(inputs, function(input) {
				if(input) {
					var name = ('' + input.name).toLowerCase();
					if (name.indexOf(query) !== -1 || ('' + input.defnum).indexOf(query) !== -1) {
						result.push(input);
					} else {
						var c = input.c;
						for(var i=0; i< c.length; i++) {
							if(('' + c[i].phone).indexOf(query) !== -1) {
								result.push(input);
								break;
							}
						}

					}
				}
			});
			return result;
			}
		});

routerApp.directive('focusOnShow', ["$timeout", function($timeout) {
    return {
        restrict: 'A',
        link: function($scope, $element, $attr) {
            if ($attr.ngShow){
                $scope.$watch($attr.ngShow, function(newValue){
                    if(newValue){
                        $timeout(function(){
                            $element.focus();
                        }, 0);
                    }
                })      
            }
            if ($attr.ngHide){
                $scope.$watch($attr.ngHide, function(newValue){
                    if(!newValue){
                        $timeout(function(){
                            $element.focus();
                        }, 0);
                    }
                })      
            }

        }
    };
}]);

function objValue(o, key, defvalue) {
	if(o[key] == 'undefined' || typeof o[key] == 'undefined')
		return defvalue;

	return o[key];
}

function alertObject(p) {
	var shown = false;
	for (var key in p) {
	  if (p.hasOwnProperty(key)) {
		alert(key + " -> " + p[key]);
		shown = true;
	  }
	}
	if(!shown)
		alert('empty object');
}

function Linkify(inputText) {
    //URLs starting with http://, https://, or ftp://
    var replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
    var replacedText = inputText.replace(replacePattern1, '<a href="$1" target="_blank">$1</a>');

    //URLs starting with www. (without // before it, or it'd re-link the ones done above)
    var replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
    var replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');

    //Change email addresses to mailto:: links
    var replacePattern3 = /(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/gim;
    var replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');

    return replacedText
}

